% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/package.r
\name{clean}
\alias{clean}
\title{Clean up data to make it easier to work with.}
\usage{
clean(
  data,
  colname = "camel",
  auto_format = "partial",
  drop_na = TRUE,
  drop_nan = TRUE
)
}
\arguments{
\item{data}{The \code{dataframe} that needs to be cleaned.}

\item{colname}{A \code{string} indicating the kind of format that should be used for the column names. \code{"camel"} per default of \code{"snake"|"camel"|"make"|"none"}.}

\item{auto_format}{A \code{string} indicating the kind of format that should be applied for each column. \code{"partial"} per default of \code{"full"|"partial"|"base"|"boolean"|"number"|"date"|"factor"|"none"}.}

\item{drop_na}{A \code{boolean} indicating whether columns containing only \code{NA} or \code{NaN} should be removed.  \code{TRUE} per default.}

\item{drop_nan}{A \code{boolean} indicating whether columns containing only \code{NaN} should be removed.  \code{TRUE} per default.}
}
\value{
The cleaned up \code{dataframe}.
}
\description{
This function is a wrapper for all the \code{rcleanup} functions.
They can be used to cleanup and restructure the dataset for future use,
without noticeably changing the data itself.
The changes made include:
\itemize{
\item Names of columns (renaming duplicates, changing the format).
\item Type of the data in the columns (can also slightly change the data \verb{1,1} => \code{1.1}).
\item Removing unnecessary columns (only \code{NA} or \code{NaN}).
}
}
\details{
More information
\subsection{Rename Columns}{

It combines: \code{\link[=make.namesSnake]{make.namesSnake()}}, \code{\link[=make.namesCamel]{make.namesCamel()}}, \code{\link[base:make.names]{base::make.names()}}
and applies them with the \code{\link[dplyr:rename]{dplyr::rename_with()}} function to the provided data.
\code{colname="camel"} => \code{rename_with(data, make.namesCamel)}
\code{colname="snake"} => \code{rename_with(data, make.namesSnake)}
\code{colname="make"} => \code{rename_with(data, make.names)}
}

\subsection{Change Column Types}{

It dynamically and "automatically" changes the datatype of the provided data based on the format for each column.
This is done by using: \code{\link[=formatBoolean]{formatBoolean()}}, \code{\link[=formatNumber]{formatNumber()}}, \code{\link[=formatDate]{formatDate()}}, \code{\link[=formatFactor]{formatFactor()}}.
Certain keywords correspond to certain combinations:
\code{auto_format="full"} => \code{data \%>\% formatBoolean() \%>\% formatNumber() \%>\% formatDate() \%>\% formatFactor()}
\code{auto_format="partial"} => \code{data \%>\% formatBoolean() \%>\% formatNumber() \%>\% formatDate()}
\code{auto_format="basic"} => \code{data \%>\% formatBoolean() \%>\% formatNumber()}
}

\subsection{Remove Unnecessary Data}{

It removes columns that only contain \code{NA} or \code{NaN} using \code{\link[=drop_full_na]{drop_full_na()}} or \code{\link[=drop_full_nan]{drop_full_nan()}} similar to the \code{\link[tidyr:drop_na]{tidyr::drop_na()}} function.
WARNING: \code{\link[=drop_full_na]{drop_full_na()}} will also drop all \code{NaN}.
Therefore setting \code{drop_nan} to \code{FALSE} while \code{drop_na} is \code{TRUE} will still drop all \code{NaN}.
}
}
\examples{
```r
#clean(data, colname="camel", auto_format="partial", drop_na=TRUE, drop_nan=TRUE) <=> clean(data)
clean(data)

#same only with snake case names
clean(data, colname="snake")

#same only with names made by `make.names()` and no format
clean(data, colname="make")

#no col name formatting
clean(data, colname="none")

#full type formatting
clean(data, auto_format="full")

#partial type formatting (no factors)
clean(data, auto_format="partial")

#base type formatting (no factors or dates)
clean(data, auto_format="base")

#basic type formatting (only boolean)
clean(data, auto_format="boolean")
... # for each spezial type

#no type formatting
clean(data, auto_format="none")

#remove all columns containing only NA or NaN
clean(data, drop_na=TRUE)

#remove all columns containing only NaN
clean(data, drop_nan=TRUE)
```
}
